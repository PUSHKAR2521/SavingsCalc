<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold text-gray-800">Expenses</h1>
    <a href="/expenses/add" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
      </svg>
      Add New Expense
    </a>
  </div>

  <!-- Filter Section -->
  <div class="bg-white rounded-lg shadow-md p-4 mb-6">
    <h2 class="text-xl font-semibold mb-4">Filter Results</h2>
    <form action="/expenses" method="GET" class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div>
        <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
        <select id="category" name="category" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50">
          <option value="All" <%= filters.category === 'All' ? 'selected' : '' %>>All Categories</option>
          <option value="Housing" <%= filters.category === 'Housing' ? 'selected' : '' %>>Housing</option>
          <option value="Transportation" <%= filters.category === 'Transportation' ? 'selected' : '' %>>Transportation</option>
          <option value="Food" <%= filters.category === 'Food' ? 'selected' : '' %>>Food</option>
          <option value="Utilities" <%= filters.category === 'Utilities' ? 'selected' : '' %>>Utilities</option>
          <option value="Insurance" <%= filters.category === 'Insurance' ? 'selected' : '' %>>Insurance</option>
          <option value="Healthcare" <%= filters.category === 'Healthcare' ? 'selected' : '' %>>Healthcare</option>
          <option value="Entertainment" <%= filters.category === 'Entertainment' ? 'selected' : '' %>>Entertainment</option>
          <option value="Personal" <%= filters.category === 'Personal' ? 'selected' : '' %>>Personal</option>
          <option value="Education" <%= filters.category === 'Education' ? 'selected' : '' %>>Education</option>
          <option value="Debt" <%= filters.category === 'Debt' ? 'selected' : '' %>>Debt</option>
          <option value="Other" <%= filters.category === 'Other' ? 'selected' : '' %>>Other</option>
        </select>
      </div>
      <div>
        <label for="startDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
        <input type="date" id="startDate" name="startDate" value="<%= filters.startDate %>" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50">
      </div>
      <div>
        <label for="endDate" class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
        <input type="date" id="endDate" name="endDate" value="<%= filters.endDate %>" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50">
      </div>
      <div>
        <label for="sort" class="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
        <select id="sort" name="sort" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50">
          <option value="newest" <%= filters.sort === 'newest' ? 'selected' : '' %>>Date (Newest First)</option>
          <option value="oldest" <%= filters.sort === 'oldest' ? 'selected' : '' %>>Date (Oldest First)</option>
          <option value="amount-high" <%= filters.sort === 'amount-high' ? 'selected' : '' %>>Amount (High to Low)</option>
          <option value="amount-low" <%= filters.sort === 'amount-low' ? 'selected' : '' %>>Amount (Low to High)</option>
        </select>
      </div>
      <div class="md:col-span-4 flex justify-end">
        <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300">
          Apply Filters
        </button>
      </div>
    </form>
  </div>

  <!-- Summary Section -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <!-- Total Card -->
    <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-red-500">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">Total Expenses</p>
          <h3 class="text-2xl font-bold text-gray-800 mt-1">₹<%= total.toFixed(2) %></h3>
        </div>
        <div class="p-2 bg-red-100 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
          </svg>
        </div>
      </div>
      <p class="text-xs text-gray-500 mt-2">For period <%= dateRange.start %> - <%= dateRange.end %></p>
    </div>

    <!-- Category Chart -->
    <div class="bg-white rounded-lg shadow-md p-6 md:col-span-2">
      <h3 class="text-lg font-semibold text-gray-800 mb-4">Expenses by Category</h3>
      <div class="h-64">
        <canvas id="categoryChart"></canvas>
      </div>
    </div>
  </div>

  <!-- Expenses Table -->
  <div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-semibold mb-4">Expense Transactions</h2>
    <% if (expenses && expenses.length > 0) { %>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payment Method</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200">
            <% expenses.forEach(expense => { %>
              <tr>
                <td class="px-4 py-3 text-sm text-gray-500"><%= new Date(expense.date).toLocaleDateString() %></td>
                <td class="px-4 py-3">
                  <span class="px-2 py-1 text-xs font-medium rounded-full <%= getCategoryClass(expense.category) %>">
                    <%= expense.category %>
                  </span>
                </td>
                <td class="px-4 py-3 text-sm text-gray-900"><%= expense.description || '-' %></td>
                <td class="px-4 py-3 text-sm font-medium text-red-600">₹<%= expense.amount.toFixed(2) %></td>
                <td class="px-4 py-3 text-sm text-gray-500"><%= expense.paymentMethod %></td>
                <td class="px-4 py-3 text-sm text-gray-500 whitespace-nowrap">
                  <a href="/expenses/edit/<%= expense._id %>" class="text-blue-500 hover:text-blue-700 mr-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </a>
                  <button class="text-red-500 hover:text-red-700 delete-expense" data-id="<%= expense._id %>">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    <% } else { %>
      <div class="text-center py-8">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 class="mt-4 text-lg font-medium text-gray-900">No expenses found</h3>
        <p class="mt-1 text-gray-500">Get started by adding your first expense.</p>
        <div class="mt-6">
          <a href="/expenses/add" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300">
            Add Expense
          </a>
        </div>
      </div>
    <% } %>
  </div>
</div>

<script>
  // Helper function for category styling
  function getCategoryClass(category) {
    const categoryClasses = {
      'Housing': 'bg-blue-100 text-blue-800',
      'Transportation': 'bg-green-100 text-green-800',
      'Food': 'bg-yellow-100 text-yellow-800',
      'Utilities': 'bg-purple-100 text-purple-800',
      'Insurance': 'bg-indigo-100 text-indigo-800',
      'Healthcare': 'bg-red-100 text-red-800',
      'Entertainment': 'bg-pink-100 text-pink-800',
      'Personal': 'bg-orange-100 text-orange-800',
      'Education': 'bg-teal-100 text-teal-800',
      'Debt': 'bg-gray-100 text-gray-800',
      'Other': 'bg-gray-100 text-gray-800'
    };
    
    return categoryClasses[category] || 'bg-gray-100 text-gray-800';
  }
  
  document.addEventListener('DOMContentLoaded', function() {
    // Category chart
    const ctx = document.getElementById('categoryChart').getContext('2d');
    
    const categoryData = {
      labels: JSON.parse('<%- JSON.stringify(categoryData.labels) %>'),
      values: JSON.parse('<%- JSON.stringify(categoryData.values) %>'),
    };
    
    // Define colors for categories
    const categoryColors = [
      '#3B82F6', // blue
      '#10B981', // green
      '#F59E0B', // yellow
      '#8B5CF6', // purple
      '#6366F1', // indigo
      '#EF4444', // red
      '#EC4899', // pink
      '#F97316', // orange
      '#14B8A6', // teal
      '#6B7280', // gray
      '#9CA3AF'  // gray-400
    ];
    
    new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: categoryData.labels,
        datasets: [{
          data: categoryData.values,
          backgroundColor: categoryColors.slice(0, categoryData.labels.length),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              boxWidth: 12
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.parsed || 0;
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                return `${label}: ₹${value.toFixed(2)} (${percentage}%)`;
              }
            }
          }
        }
      }
    });
    
    // Delete expense functionality
    const deleteButtons = document.querySelectorAll('.delete-expense');
    
    deleteButtons.forEach(button => {
      button.addEventListener('click', function() {
        const expenseId = this.getAttribute('data-id');
        
        if (confirm('Are you sure you want to delete this expense? This action cannot be undone.')) {
          fetch(`/expenses/${expenseId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Remove the row from the table
              this.closest('tr').remove();
              
              // Show success message
              alert('Expense deleted successfully');
              
              // Reload the page to update summary statistics
              window.location.reload();
            } else {
              alert(data.message || 'Failed to delete expense');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the expense');
          });
        }
      });
    });
  });
</script>